this.WS=this.WS||{},this.WS.SDKMultiActionHack=function(){"use strict";function t(){return"unsafeWindow"in window?window.unsafeWindow:window}class i{constructor(t,i,n){this._target=t,this._methodName=i,this._interceptor=n,this._isEnabled=!1,this.managedInterceptor=(...t)=>this._isEnabled?this._interceptor(((...t)=>this.invokeOriginal(...t)),...t):this.invokeOriginal(...t),this.initialize()}initialize(){this._originalMethod=this._target[this._methodName],this._target[this._methodName]=this.managedInterceptor}invokeOriginal(...t){return this._originalMethod.apply(this._target,t)}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}}function n(i){const n=function(){try{return t().require("Waze/Action/MultiAction")}catch(t){return null}}();if(!n)throw new Error("Unable to retrieve MultiAction");return new n(i)}class a{constructor(t){this._actionsInTransaction=[],this._hasActiveTransaction=!1,this._interceptor=new i(t,"add",((t,i)=>this.isTransactionOpen?(this._actionsInTransaction.push(i),!0):t(i))),this._interceptor.enable()}closeTransaction(){return this._hasActiveTransaction=!1,this.getTransactionActions()}openTransaction(){this._actionsInTransaction=[],this._hasActiveTransaction=!0}get isTransactionOpen(){return this._hasActiveTransaction}beginTransaction(){this.openTransaction()}getTransactionActions(){return this._actionsInTransaction}commitTransaction(t){const i=this.closeTransaction(),a=n(i);a?(t&&(a._description=t),this._interceptor.invokeOriginal(a)):i.forEach((t=>this._interceptor.invokeOriginal(t)))}}const s=t();let e;return s.SDK_INITIALIZED.then((()=>{e=new a(s.W.model.actionManager)})),{beginTransaction:()=>e.beginTransaction(),commitTransaction:t=>e.commitTransaction(t),groupActions(t,i){e.beginTransaction();try{t()}finally{e.commitTransaction(i)}}}}();
